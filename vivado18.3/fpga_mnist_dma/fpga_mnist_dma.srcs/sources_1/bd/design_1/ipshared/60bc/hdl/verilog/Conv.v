// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Conv,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.482600,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=26,HLS_SYN_FF=4146,HLS_SYN_LUT=4636,HLS_VERSION=2018_3}" *)

module Conv (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 62'd1;
parameter    ap_ST_fsm_state2 = 62'd2;
parameter    ap_ST_fsm_state3 = 62'd4;
parameter    ap_ST_fsm_state4 = 62'd8;
parameter    ap_ST_fsm_state5 = 62'd16;
parameter    ap_ST_fsm_state6 = 62'd32;
parameter    ap_ST_fsm_state7 = 62'd64;
parameter    ap_ST_fsm_state8 = 62'd128;
parameter    ap_ST_fsm_state9 = 62'd256;
parameter    ap_ST_fsm_state10 = 62'd512;
parameter    ap_ST_fsm_state11 = 62'd1024;
parameter    ap_ST_fsm_state12 = 62'd2048;
parameter    ap_ST_fsm_state13 = 62'd4096;
parameter    ap_ST_fsm_state14 = 62'd8192;
parameter    ap_ST_fsm_state15 = 62'd16384;
parameter    ap_ST_fsm_state16 = 62'd32768;
parameter    ap_ST_fsm_state17 = 62'd65536;
parameter    ap_ST_fsm_state18 = 62'd131072;
parameter    ap_ST_fsm_state19 = 62'd262144;
parameter    ap_ST_fsm_state20 = 62'd524288;
parameter    ap_ST_fsm_state21 = 62'd1048576;
parameter    ap_ST_fsm_state22 = 62'd2097152;
parameter    ap_ST_fsm_state23 = 62'd4194304;
parameter    ap_ST_fsm_state24 = 62'd8388608;
parameter    ap_ST_fsm_state25 = 62'd16777216;
parameter    ap_ST_fsm_state26 = 62'd33554432;
parameter    ap_ST_fsm_state27 = 62'd67108864;
parameter    ap_ST_fsm_state28 = 62'd134217728;
parameter    ap_ST_fsm_state29 = 62'd268435456;
parameter    ap_ST_fsm_state30 = 62'd536870912;
parameter    ap_ST_fsm_state31 = 62'd1073741824;
parameter    ap_ST_fsm_state32 = 62'd2147483648;
parameter    ap_ST_fsm_state33 = 62'd4294967296;
parameter    ap_ST_fsm_state34 = 62'd8589934592;
parameter    ap_ST_fsm_state35 = 62'd17179869184;
parameter    ap_ST_fsm_pp0_stage0 = 62'd34359738368;
parameter    ap_ST_fsm_pp0_stage1 = 62'd68719476736;
parameter    ap_ST_fsm_pp0_stage2 = 62'd137438953472;
parameter    ap_ST_fsm_pp0_stage3 = 62'd274877906944;
parameter    ap_ST_fsm_pp0_stage4 = 62'd549755813888;
parameter    ap_ST_fsm_state55 = 62'd1099511627776;
parameter    ap_ST_fsm_state56 = 62'd2199023255552;
parameter    ap_ST_fsm_state57 = 62'd4398046511104;
parameter    ap_ST_fsm_state58 = 62'd8796093022208;
parameter    ap_ST_fsm_state59 = 62'd17592186044416;
parameter    ap_ST_fsm_state60 = 62'd35184372088832;
parameter    ap_ST_fsm_state61 = 62'd70368744177664;
parameter    ap_ST_fsm_state62 = 62'd140737488355328;
parameter    ap_ST_fsm_state63 = 62'd281474976710656;
parameter    ap_ST_fsm_state64 = 62'd562949953421312;
parameter    ap_ST_fsm_state65 = 62'd1125899906842624;
parameter    ap_ST_fsm_state66 = 62'd2251799813685248;
parameter    ap_ST_fsm_state67 = 62'd4503599627370496;
parameter    ap_ST_fsm_state68 = 62'd9007199254740992;
parameter    ap_ST_fsm_state69 = 62'd18014398509481984;
parameter    ap_ST_fsm_state70 = 62'd36028797018963968;
parameter    ap_ST_fsm_state71 = 62'd72057594037927936;
parameter    ap_ST_fsm_state72 = 62'd144115188075855872;
parameter    ap_ST_fsm_state73 = 62'd288230376151711744;
parameter    ap_ST_fsm_state74 = 62'd576460752303423488;
parameter    ap_ST_fsm_state75 = 62'd1152921504606846976;
parameter    ap_ST_fsm_state76 = 62'd2305843009213693952;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [61:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] CHin_V;
wire   [15:0] Hin_V;
wire   [15:0] Win_V;
wire   [15:0] CHout_V;
wire   [7:0] Kx_V;
wire   [7:0] Ky_V;
wire   [7:0] Sx_V;
wire   [7:0] Sy_V;
wire   [0:0] mode_V;
wire   [0:0] relu_en_V;
wire   [31:0] feature_in;
wire   [31:0] W;
wire   [31:0] bias;
wire   [31:0] feature_out;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] exitcond2_reg_1819;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage3;
reg   [0:0] exitcond2_reg_1819_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state64;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state70;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state71;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state76;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [15:0] i_op_assign_reg_396;
reg   [31:0] ret_V_14_reg_408;
reg   [31:0] sum_2_reg_419;
reg   [0:0] relu_en_V_read_reg_1375;
reg   [7:0] Sy_V_read_reg_1380;
reg   [7:0] Sx_V_read_reg_1386;
reg   [7:0] Ky_V_read_reg_1392;
reg   [7:0] Kx_V_read_reg_1398;
reg   [15:0] CHout_V_read_reg_1405;
reg   [15:0] Win_V_read_reg_1411;
reg   [15:0] Hin_V_read_reg_1417;
reg   [15:0] CHin_V_read_reg_1422;
reg   [29:0] tmp_1_reg_1429;
reg   [29:0] tmp_2_reg_1434;
reg   [29:0] tmp_4_reg_1439;
reg   [29:0] tmp_5_reg_1444;
wire   [7:0] p_1_fu_617_p3;
reg   [7:0] p_1_reg_1449;
wire   [7:0] p_2_fu_625_p3;
reg   [7:0] p_2_reg_1455;
wire   [16:0] lhs_V_2_cast_fu_644_p1;
reg   [16:0] lhs_V_2_cast_reg_1461;
wire    ap_CS_fsm_state2;
wire   [16:0] lhs_V_4_cast_fu_690_p1;
reg   [16:0] lhs_V_4_cast_reg_1476;
wire   [15:0] grp_fu_673_p2;
reg   [15:0] tmp_15_reg_1492;
wire    ap_CS_fsm_state24;
wire   [15:0] grp_fu_719_p2;
reg   [15:0] tmp_17_reg_1497;
wire   [15:0] Wout_V_fu_728_p2;
reg   [15:0] Wout_V_reg_1502;
wire    ap_CS_fsm_state25;
wire   [31:0] rhs_V_4_cast_fu_743_p1;
reg   [31:0] rhs_V_4_cast_reg_1508;
wire   [31:0] bound4_fu_1316_p2;
reg   [31:0] bound4_reg_1514;
wire   [48:0] tmp_2_cast1_fu_751_p1;
reg   [48:0] tmp_2_cast1_reg_1520;
wire    ap_CS_fsm_state26;
wire   [30:0] tmp_8_cast_fu_754_p1;
reg   [30:0] tmp_8_cast_reg_1525;
wire   [48:0] tmp_10_cast_fu_757_p1;
reg   [48:0] tmp_10_cast_reg_1530;
wire   [47:0] tmp_12_cast_fu_760_p1;
reg   [47:0] tmp_12_cast_reg_1535;
wire   [15:0] tmp_9_fu_763_p1;
reg   [15:0] tmp_9_reg_1540;
wire   [15:0] tmp_s_fu_766_p1;
reg   [15:0] tmp_s_reg_1545;
wire   [31:0] rhs_V_1_fu_769_p1;
reg   [31:0] rhs_V_1_reg_1550;
wire   [15:0] tmp_20_fu_772_p1;
reg   [15:0] tmp_20_reg_1557;
wire   [15:0] tmp_22_fu_775_p1;
reg   [15:0] tmp_22_reg_1563;
wire   [47:0] rhs_V_2_fu_778_p1;
reg   [47:0] rhs_V_2_reg_1568;
wire   [15:0] rhs_V_16_cast_fu_781_p1;
reg   [15:0] rhs_V_16_cast_reg_1573;
wire   [47:0] rhs_V_12_cast1_fu_784_p1;
reg   [47:0] rhs_V_12_cast1_reg_1578;
wire   [23:0] rhs_V_13_cast_fu_787_p1;
reg   [23:0] rhs_V_13_cast_reg_1585;
wire   [31:0] rhs_V_14_cast_fu_790_p1;
reg   [31:0] rhs_V_14_cast_reg_1590;
wire   [15:0] bound_fu_796_p2;
reg   [15:0] bound_reg_1596;
wire   [47:0] bound1_fu_805_p2;
reg   [47:0] bound1_reg_1601;
wire   [0:0] exitcond_mid_fu_811_p2;
reg   [0:0] exitcond_mid_reg_1606;
wire   [31:0] ret_V_1_fu_1322_p2;
reg   [31:0] ret_V_1_reg_1611;
wire    ap_CS_fsm_state27;
wire   [0:0] exitcond_flatten1_fu_820_p2;
reg   [0:0] exitcond_flatten1_reg_1616;
wire   [47:0] indvar_flatten_next1_fu_825_p2;
reg   [47:0] indvar_flatten_next1_reg_1620;
wire   [47:0] ret_V_5_fu_834_p2;
reg   [47:0] ret_V_5_reg_1625;
wire    ap_CS_fsm_state28;
wire   [0:0] exitcond_flatten2_fu_839_p2;
reg   [0:0] exitcond_flatten2_reg_1630;
wire   [15:0] i_op_assign_16_mid_fu_844_p3;
reg   [15:0] i_op_assign_16_mid_reg_1639;
wire   [0:0] exitcond_mid1_fu_857_p3;
reg   [0:0] exitcond_mid1_reg_1645;
wire  signed [15:0] tmp_23_fu_1327_p2;
reg  signed [15:0] tmp_23_reg_1653;
wire    ap_CS_fsm_state29;
wire  signed [15:0] i_op_assign_17_mid2_fu_873_p3;
reg  signed [15:0] i_op_assign_17_mid2_reg_1658;
wire   [31:0] ret_V_1_mid1_fu_1332_p2;
reg   [31:0] ret_V_1_mid1_reg_1664;
wire  signed [15:0] tmp_21_mid1_fu_1337_p2;
reg  signed [15:0] tmp_21_mid1_reg_1669;
wire   [15:0] i_op_assign_16_mid2_fu_885_p3;
reg   [15:0] i_op_assign_16_mid2_reg_1674;
wire  signed [15:0] grp_fu_1342_p3;
reg  signed [15:0] tmp_27_reg_1679;
wire   [15:0] tmp_24_mid2_fu_906_p2;
reg   [15:0] tmp_24_mid2_reg_1684;
wire    ap_CS_fsm_state30;
wire   [47:0] ret_V_5_mid1_fu_911_p2;
reg   [47:0] ret_V_5_mid1_reg_1690;
wire   [15:0] tmp_10_mid2_v_fu_922_p3;
reg   [15:0] tmp_10_mid2_v_reg_1695;
wire    ap_CS_fsm_state31;
wire   [30:0] tmp_10_mid2_cast_fu_929_p1;
reg   [30:0] tmp_10_mid2_cast_reg_1700;
wire   [31:0] tmp_10_cast_mid2_fu_933_p1;
reg   [31:0] tmp_10_cast_mid2_reg_1705;
wire   [47:0] ret_V_5_mid2_fu_943_p3;
reg   [47:0] ret_V_5_mid2_reg_1711;
wire   [31:0] i_op_assign_17_cast7_fu_949_p1;
reg   [31:0] i_op_assign_17_cast7_reg_1716;
wire   [15:0] indvar_flatten_next_fu_981_p2;
reg   [15:0] indvar_flatten_next_reg_1724;
wire    ap_CS_fsm_state32;
wire   [7:0] i_op_assign_19_mid2_fu_992_p3;
reg   [7:0] i_op_assign_19_mid2_reg_1729;
wire   [0:0] exitcond_flatten_fu_976_p2;
wire  signed [15:0] h_V_mid2_fu_1015_p3;
reg  signed [15:0] h_V_mid2_reg_1735;
wire   [7:0] ret_V_15_mid2_v_v_v_fu_1027_p3;
reg   [7:0] ret_V_15_mid2_v_v_v_reg_1740;
wire   [15:0] ret_V_15_mid2_v_v_fu_1039_p2;
reg   [15:0] ret_V_15_mid2_v_v_reg_1745;
(* use_dsp48 = "no" *) wire  signed [15:0] w_V_fu_1067_p2;
reg  signed [15:0] w_V_reg_1750;
wire   [0:0] brmerge_fu_1086_p2;
reg   [0:0] brmerge_reg_1756;
wire   [30:0] bias6_sum_fu_1092_p2;
reg   [30:0] bias6_sum_reg_1760;
wire   [47:0] tmp_19_fu_1099_p2;
reg   [47:0] tmp_19_reg_1765;
wire   [15:0] j_fu_1104_p2;
reg   [15:0] j_reg_1770;
wire   [31:0] indvar_flatten_next7_fu_1115_p3;
reg   [31:0] indvar_flatten_next7_reg_1775;
wire  signed [31:0] ret_V_10_mid2_v_v_fu_1354_p2;
reg  signed [31:0] ret_V_10_mid2_v_v_reg_1780;
wire    ap_CS_fsm_state33;
wire   [31:0] ret_V_15_mid2_fu_1359_p2;
reg   [31:0] ret_V_15_mid2_reg_1785;
wire   [47:0] ret_V_10_mid2_fu_1131_p2;
reg   [47:0] ret_V_10_mid2_reg_1790;
wire    ap_CS_fsm_state34;
wire  signed [31:0] lhs_V_fu_1136_p1;
reg  signed [31:0] lhs_V_reg_1795;
wire   [0:0] tmp_34_fu_1142_p2;
reg   [0:0] tmp_34_reg_1800;
wire   [31:0] grp_fu_1364_p3;
reg   [31:0] tmp_reg_1804;
wire  signed [47:0] grp_fu_1370_p3;
reg  signed [47:0] ret_V_10_reg_1809;
wire    ap_CS_fsm_state35;
wire   [47:0] tmp1_fu_1153_p2;
reg   [47:0] tmp1_reg_1814;
wire   [0:0] exitcond2_fu_1158_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state36_pp0_stage0_iter0;
wire    ap_block_state41_pp0_stage0_iter1;
wire    ap_block_state46_pp0_stage0_iter2;
wire    ap_block_state51_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond2_reg_1819_pp0_iter2_reg;
reg   [0:0] exitcond2_reg_1819_pp0_iter3_reg;
reg   [31:0] gmem_addr_2_reg_1823;
wire   [31:0] next_mul_fu_1187_p2;
reg   [31:0] next_mul_reg_1829;
wire   [31:0] tmp2_fu_1192_p2;
reg   [31:0] tmp2_reg_1834;
reg   [31:0] gmem_addr_3_reg_1839;
wire    ap_block_state37_pp0_stage1_iter0;
reg    ap_sig_ioackin_gmem_ARREADY;
reg    ap_block_state37_io;
wire    ap_block_state42_pp0_stage1_iter1;
wire    ap_block_state47_pp0_stage1_iter2;
wire    ap_block_state52_pp0_stage1_iter3;
reg    ap_block_pp0_stage1_11001;
wire   [15:0] cin_fu_1224_p2;
reg   [15:0] cin_reg_1845;
wire    ap_block_state40_pp0_stage4_iter0;
reg    ap_block_state45_pp0_stage4_iter1;
wire    ap_block_state50_pp0_stage4_iter2;
reg    ap_block_pp0_stage4_11001;
reg   [31:0] gmem_addr_2_read_reg_1850;
wire    ap_block_state39_pp0_stage3_iter0;
reg    ap_block_state44_pp0_stage3_iter1;
wire    ap_block_state49_pp0_stage3_iter2;
wire    ap_block_state54_pp0_stage3_iter3;
reg    ap_block_pp0_stage3_11001;
reg   [31:0] gmem_addr_3_read_reg_1855;
wire   [31:0] grp_fu_452_p2;
reg   [31:0] tp_reg_1860;
wire   [31:0] grp_fu_446_p2;
reg    ap_enable_reg_pp0_iter3;
wire   [7:0] jj_fu_1230_p2;
reg   [7:0] jj_reg_1870;
wire    ap_CS_fsm_state55;
reg   [31:0] gmem_addr_1_reg_1881;
reg   [31:0] gmem_addr_read_reg_1887;
reg   [31:0] sum_reg_1892;
wire    ap_CS_fsm_state69;
wire   [31:0] p_s_fu_1309_p3;
reg   [31:0] p_s_reg_1899;
reg    ap_sig_ioackin_gmem_AWREADY;
reg    ap_block_pp0_stage4_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_condition_pp0_exit_iter2_state50;
reg   [47:0] indvar_flatten1_reg_292;
reg  signed [15:0] i_op_assign_1_reg_303;
reg   [15:0] i_op_assign_s_reg_315;
reg   [31:0] indvar_flatten6_reg_327;
reg   [15:0] i_op_assign_2_reg_339;
reg   [15:0] indvar_flatten_reg_351;
wire    ap_CS_fsm_state56;
reg   [7:0] i_op_assign_3_reg_362;
reg   [7:0] i_op_assign_4_reg_373;
reg   [31:0] sum_1_reg_384;
reg   [15:0] ap_phi_mux_i_op_assign_phi_fu_400_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_ret_V_14_phi_fu_412_p4;
reg   [31:0] sum_3_reg_430;
wire  signed [63:0] feature_in2_sum9_cas_fu_1177_p1;
wire   [63:0] W4_sum_cast_fu_1214_p1;
wire   [63:0] bias6_sum_cast_fu_1235_p1;
wire   [63:0] feature_out8_sum_cas_fu_1253_p1;
reg    ap_reg_ioackin_gmem_ARREADY;
wire    ap_block_pp0_stage1_01001;
wire    ap_block_state38_pp0_stage2_iter0;
wire    ap_block_state43_pp0_stage2_iter1;
wire    ap_block_state48_pp0_stage2_iter2;
wire    ap_block_state53_pp0_stage2_iter3;
wire    ap_block_pp0_stage2_01001;
reg    ap_block_state38_io;
reg    ap_block_pp0_stage2_11001;
reg    ap_reg_ioackin_gmem_AWREADY;
reg    ap_reg_ioackin_gmem_WREADY;
reg    ap_sig_ioackin_gmem_WREADY;
reg   [31:0] grp_fu_446_p0;
reg   [31:0] grp_fu_446_p1;
wire    ap_CS_fsm_state65;
wire   [8:0] tmp_2_cast_fu_501_p1;
wire   [8:0] ret_V_tr_fu_505_p2;
wire   [8:0] p_neg9_fu_519_p2;
wire   [7:0] tmp_3_fu_525_p4;
wire   [0:0] tmp_8_fu_511_p3;
wire   [7:0] tmp_6_fu_545_p2;
wire   [7:0] tmp_10_fu_535_p4;
wire   [8:0] tmp_16_cast_fu_559_p1;
wire   [8:0] ret_V_1_tr_fu_563_p2;
wire   [8:0] p_neg_fu_577_p2;
wire   [7:0] tmp_12_fu_583_p4;
wire   [0:0] tmp_11_fu_569_p3;
wire   [7:0] tmp_14_fu_603_p2;
wire   [7:0] tmp_13_fu_593_p4;
wire   [7:0] pad_x_V_fu_551_p3;
wire   [7:0] pad_y_V_fu_609_p3;
wire   [8:0] ret_V_2_fu_633_p3;
wire   [16:0] ret_V_2_cast_fu_640_p1;
wire   [16:0] ret_V_3_fu_647_p2;
wire   [17:0] ret_V_3_cast_fu_653_p1;
wire   [17:0] rhs_V_2_cast_fu_657_p1;
wire   [17:0] ret_V_4_fu_660_p2;
wire  signed [18:0] grp_fu_673_p0;
wire   [8:0] grp_fu_673_p1;
wire   [8:0] ret_V_6_fu_679_p3;
wire   [16:0] ret_V_6_cast_fu_686_p1;
wire   [16:0] ret_V_7_fu_693_p2;
wire   [17:0] ret_V_7_cast_fu_699_p1;
wire   [17:0] rhs_V_5_cast_fu_703_p1;
wire   [17:0] ret_V_8_fu_706_p2;
wire  signed [18:0] grp_fu_719_p0;
wire   [8:0] grp_fu_719_p1;
wire   [15:0] tmp_16_fu_725_p1;
wire   [15:0] tmp_21_fu_734_p1;
wire   [15:0] tmp_7_fu_737_p2;
wire   [7:0] bound_fu_796_p0;
wire   [7:0] bound_fu_796_p1;
wire   [15:0] bound1_fu_805_p0;
wire   [31:0] bound1_fu_805_p1;
wire   [31:0] ret_V_5_fu_834_p0;
wire   [15:0] ret_V_5_fu_834_p1;
wire   [0:0] exitcond_fu_852_p2;
wire   [0:0] tmp_24_fu_869_p2;
(* use_dsp48 = "no" *) wire  signed [15:0] i_fu_864_p2;
wire   [15:0] tmp_24_mid226_v_fu_891_p3;
wire   [15:0] tmp_24_mid2_v_fu_900_p3;
wire   [31:0] ret_V_5_mid1_fu_911_p0;
wire   [15:0] ret_V_5_mid1_fu_911_p1;
wire   [15:0] cout_fu_916_p2;
wire   [47:0] ret_V_5_mid_fu_937_p3;
wire   [15:0] tmp_18_fu_952_p1;
wire  signed [15:0] h_V_fu_956_p2;
wire  signed [16:0] lhs_V_5_cast_fu_961_p1;
wire   [0:0] slt_fu_965_p2;
wire   [0:0] exitcond1_fu_987_p2;
wire   [7:0] ii_fu_1000_p2;
wire   [15:0] tmp_18_mid1_fu_1006_p1;
wire  signed [15:0] h_V_mid1_fu_1010_p2;
wire   [7:0] ret_V_15_mid2_v_v_fu_1039_p0;
wire   [7:0] ret_V_15_mid2_v_v_fu_1039_p1;
wire  signed [16:0] lhs_V_5_cast_mid1_fu_1023_p1;
wire   [0:0] slt1_fu_1044_p2;
wire   [0:0] rev1_fu_1049_p2;
wire   [0:0] rev_fu_970_p2;
wire   [15:0] tmp_28_fu_1063_p1;
wire   [15:0] tmp_29_fu_1072_p2;
wire   [0:0] tmp_36_fu_1078_p3;
wire   [0:0] tmp_32_not_mid2_fu_1055_p3;
wire   [31:0] grp_fu_1348_p3;
wire   [47:0] tmp3_cast_fu_1096_p1;
wire   [31:0] indvar_flatten6_op_fu_1109_p2;
wire   [15:0] ret_V_10_mid2_fu_1131_p0;
wire  signed [31:0] ret_V_10_mid2_fu_1131_p1;
wire  signed [16:0] lhs_V_6_cast_fu_1139_p1;
wire   [31:0] tmp1_fu_1153_p0;
wire   [15:0] tmp1_fu_1153_p1;
wire   [47:0] rhs_V_11_cast_fu_1163_p1;
(* use_dsp48 = "no" *) wire   [47:0] ret_V_13_fu_1167_p2;
wire   [47:0] feature_in2_sum9_fu_1172_p2;
wire   [47:0] tmp2_cast_fu_1197_p1;
wire   [47:0] tmp_38_fu_1200_p2;
wire   [48:0] tmp_39_cast_cast_fu_1205_p1;
wire   [48:0] W4_sum_fu_1209_p2;
wire   [48:0] tmp_19_cast_cast_fu_1245_p1;
wire   [48:0] feature_out8_sum_fu_1248_p2;
wire   [31:0] sum_4_to_int_fu_1263_p1;
wire   [7:0] tmp_30_fu_1266_p4;
wire   [22:0] tmp_31_fu_1276_p1;
wire   [0:0] notrhs_fu_1286_p2;
wire   [0:0] notlhs_fu_1280_p2;
wire   [0:0] tmp_32_fu_1292_p2;
wire   [0:0] tmp_33_fu_456_p2;
wire   [0:0] rhs_V_fu_1298_p2;
wire   [0:0] ret_V_fu_1304_p2;
wire   [15:0] bound4_fu_1316_p0;
wire   [15:0] bound4_fu_1316_p1;
wire   [15:0] ret_V_1_fu_1322_p0;
wire   [15:0] ret_V_1_fu_1322_p1;
wire   [7:0] tmp_23_fu_1327_p0;
wire   [15:0] ret_V_1_mid1_fu_1332_p0;
wire   [15:0] ret_V_1_mid1_fu_1332_p1;
wire   [7:0] tmp_21_mid1_fu_1337_p1;
wire  signed [15:0] grp_fu_1342_p0;
wire   [7:0] grp_fu_1342_p1;
wire   [7:0] grp_fu_1342_p2;
wire   [15:0] grp_fu_1348_p0;
wire   [15:0] grp_fu_1348_p1;
wire   [15:0] grp_fu_1348_p2;
wire   [15:0] ret_V_10_mid2_v_v_fu_1354_p0;
wire   [15:0] ret_V_15_mid2_fu_1359_p0;
wire   [15:0] ret_V_15_mid2_fu_1359_p1;
wire   [7:0] grp_fu_1364_p0;
wire   [15:0] grp_fu_1364_p1;
wire  signed [15:0] grp_fu_1370_p0;
wire   [15:0] grp_fu_1370_p1;
reg    grp_fu_446_ce;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state68;
reg    grp_fu_452_ce;
reg    grp_fu_673_ap_start;
wire    grp_fu_673_ap_done;
reg    grp_fu_719_ap_start;
wire    grp_fu_719_ap_done;
reg   [61:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [47:0] bound1_fu_805_p00;
wire   [47:0] bound1_fu_805_p10;
wire   [31:0] bound4_fu_1316_p00;
wire   [31:0] bound4_fu_1316_p10;
wire   [15:0] bound_fu_796_p00;
wire   [15:0] bound_fu_796_p10;
wire   [23:0] grp_fu_1364_p00;
wire   [18:0] grp_fu_673_p10;
wire   [18:0] grp_fu_719_p10;
wire   [31:0] ret_V_15_mid2_fu_1359_p10;
wire   [15:0] ret_V_15_mid2_v_v_fu_1039_p10;
wire   [31:0] ret_V_1_fu_1322_p00;
wire   [31:0] ret_V_1_mid1_fu_1332_p00;
wire   [47:0] ret_V_5_fu_834_p00;
wire   [47:0] ret_V_5_mid1_fu_911_p00;
wire   [47:0] tmp1_fu_1153_p00;
reg    ap_condition_802;
reg    ap_condition_820;

// power-on initialization
initial begin
#0 ap_CS_fsm = 62'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_WREADY = 1'b0;
end

Conv_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
Conv_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .CHin_V(CHin_V),
    .Hin_V(Hin_V),
    .Win_V(Win_V),
    .CHout_V(CHout_V),
    .Kx_V(Kx_V),
    .Ky_V(Ky_V),
    .Sx_V(Sx_V),
    .Sy_V(Sy_V),
    .mode_V(mode_V),
    .relu_en_V(relu_en_V),
    .feature_in(feature_in),
    .W(W),
    .bias(bias),
    .feature_out(feature_out)
);

Conv_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
Conv_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_1_reg_1881),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(p_s_reg_1899),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

Conv_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Conv_fadd_32ns_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_446_p0),
    .din1(grp_fu_446_p1),
    .ce(grp_fu_446_ce),
    .dout(grp_fu_446_p2)
);

Conv_fmul_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Conv_fmul_32ns_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(gmem_addr_2_read_reg_1850),
    .din1(gmem_addr_3_read_reg_1855),
    .ce(grp_fu_452_ce),
    .dout(grp_fu_452_p2)
);

Conv_fcmp_32ns_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
Conv_fcmp_32ns_32dEe_U3(
    .din0(sum_reg_1892),
    .din1(32'd0),
    .opcode(5'd4),
    .dout(tmp_33_fu_456_p2)
);

Conv_sdiv_19s_9nseOg #(
    .ID( 1 ),
    .NUM_STAGE( 23 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
Conv_sdiv_19s_9nseOg_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_673_ap_start),
    .done(grp_fu_673_ap_done),
    .din0(grp_fu_673_p0),
    .din1(grp_fu_673_p1),
    .ce(1'b1),
    .dout(grp_fu_673_p2)
);

Conv_sdiv_19s_9nseOg #(
    .ID( 1 ),
    .NUM_STAGE( 23 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
Conv_sdiv_19s_9nseOg_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_719_ap_start),
    .done(grp_fu_719_ap_done),
    .din0(grp_fu_719_p0),
    .din1(grp_fu_719_p1),
    .ce(1'b1),
    .dout(grp_fu_719_p2)
);

Conv_mul_mul_16nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Conv_mul_mul_16nsfYi_U6(
    .din0(bound4_fu_1316_p0),
    .din1(bound4_fu_1316_p1),
    .dout(bound4_fu_1316_p2)
);

Conv_mul_mul_16nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Conv_mul_mul_16nsfYi_U7(
    .din0(ret_V_1_fu_1322_p0),
    .din1(ret_V_1_fu_1322_p1),
    .dout(ret_V_1_fu_1322_p2)
);

Conv_mul_mul_8ns_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
Conv_mul_mul_8ns_g8j_U8(
    .din0(tmp_23_fu_1327_p0),
    .din1(i_op_assign_1_reg_303),
    .dout(tmp_23_fu_1327_p2)
);

Conv_mul_mul_16nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Conv_mul_mul_16nsfYi_U9(
    .din0(ret_V_1_mid1_fu_1332_p0),
    .din1(ret_V_1_mid1_fu_1332_p1),
    .dout(ret_V_1_mid1_fu_1332_p2)
);

Conv_mul_mul_16s_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
Conv_mul_mul_16s_hbi_U10(
    .din0(i_fu_864_p2),
    .din1(tmp_21_mid1_fu_1337_p1),
    .dout(tmp_21_mid1_fu_1337_p2)
);

Conv_mac_mul_sub_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
Conv_mac_mul_sub_ibs_U11(
    .din0(grp_fu_1342_p0),
    .din1(grp_fu_1342_p1),
    .din2(grp_fu_1342_p2),
    .dout(grp_fu_1342_p3)
);

Conv_mac_muladd_1jbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Conv_mac_muladd_1jbC_U12(
    .din0(grp_fu_1348_p0),
    .din1(grp_fu_1348_p1),
    .din2(grp_fu_1348_p2),
    .dout(grp_fu_1348_p3)
);

Conv_mul_mul_16nskbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Conv_mul_mul_16nskbM_U13(
    .din0(ret_V_10_mid2_v_v_fu_1354_p0),
    .din1(h_V_mid2_reg_1735),
    .dout(ret_V_10_mid2_v_v_fu_1354_p2)
);

Conv_mul_mul_16nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Conv_mul_mul_16nsfYi_U14(
    .din0(ret_V_15_mid2_fu_1359_p0),
    .din1(ret_V_15_mid2_fu_1359_p1),
    .dout(ret_V_15_mid2_fu_1359_p2)
);

Conv_mac_muladd_8lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Conv_mac_muladd_8lbW_U15(
    .din0(grp_fu_1364_p0),
    .din1(grp_fu_1364_p1),
    .din2(ret_V_15_mid2_reg_1785),
    .dout(grp_fu_1364_p3)
);

Conv_mac_muladd_1mb6 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 48 ),
    .dout_WIDTH( 48 ))
Conv_mac_muladd_1mb6_U16(
    .din0(grp_fu_1370_p0),
    .din1(grp_fu_1370_p1),
    .din2(ret_V_10_mid2_reg_1790),
    .dout(grp_fu_1370_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4) & (exitcond2_reg_1819 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state35)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state35) | ((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state50) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state50) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state35)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state57)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_reg_1819 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond2_reg_1819 == 1'd0)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b0;
        end else if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state57)) | ((1'b0 == ap_block_pp0_stage2_01001) & (gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_reg_1819 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_01001) & (gmem_ARREADY == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond2_reg_1819 == 1'd0)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state70)) begin
            if ((ap_sig_ioackin_gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b0;
            end else if ((gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state71)) begin
            if ((ap_sig_ioackin_gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b0;
            end else if ((gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
        i_op_assign_1_reg_303 <= i_op_assign_16_mid2_reg_1674;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        i_op_assign_1_reg_303 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
        i_op_assign_2_reg_339 <= j_reg_1770;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        i_op_assign_2_reg_339 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        i_op_assign_3_reg_362 <= ret_V_15_mid2_v_v_v_reg_1740;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        i_op_assign_3_reg_362 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        i_op_assign_4_reg_373 <= jj_reg_1870;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        i_op_assign_4_reg_373 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        i_op_assign_reg_396 <= 16'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond2_reg_1819 == 1'd0))) begin
        i_op_assign_reg_396 <= cin_reg_1845;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
        i_op_assign_s_reg_315 <= tmp_10_mid2_v_reg_1695;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        i_op_assign_s_reg_315 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
        indvar_flatten1_reg_292 <= indvar_flatten_next1_reg_1620;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        indvar_flatten1_reg_292 <= 48'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
        indvar_flatten6_reg_327 <= indvar_flatten_next7_reg_1775;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        indvar_flatten6_reg_327 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        indvar_flatten_reg_351 <= indvar_flatten_next_reg_1724;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        indvar_flatten_reg_351 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        ret_V_14_reg_408 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond2_reg_1819 == 1'd0))) begin
        ret_V_14_reg_408 <= next_mul_reg_1829;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        sum_1_reg_384 <= sum_3_reg_430;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        sum_1_reg_384 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        sum_2_reg_419 <= sum_1_reg_384;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (exitcond2_reg_1819_pp0_iter3_reg == 1'd0))) begin
        sum_2_reg_419 <= grp_fu_446_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_34_reg_1800 == 1'd1) & (1'b1 == ap_CS_fsm_state55) & (brmerge_reg_1756 == 1'd0))) begin
        sum_3_reg_430 <= sum_2_reg_419;
    end else if ((((brmerge_reg_1756 == 1'd1) & (1'b1 == ap_CS_fsm_state34)) | ((1'b1 == ap_CS_fsm_state34) & (tmp_34_fu_1142_p2 == 1'd0) & (brmerge_reg_1756 == 1'd0)))) begin
        sum_3_reg_430 <= sum_1_reg_384;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        CHin_V_read_reg_1422 <= CHin_V;
        CHout_V_read_reg_1405 <= CHout_V;
        Hin_V_read_reg_1417 <= Hin_V;
        Kx_V_read_reg_1398 <= Kx_V;
        Ky_V_read_reg_1392 <= Ky_V;
        Sx_V_read_reg_1386 <= Sx_V;
        Sy_V_read_reg_1380 <= Sy_V;
        Win_V_read_reg_1411 <= Win_V;
        p_1_reg_1449 <= p_1_fu_617_p3;
        p_2_reg_1455 <= p_2_fu_625_p3;
        relu_en_V_read_reg_1375 <= relu_en_V;
        tmp_1_reg_1429 <= {{feature_out[31:2]}};
        tmp_2_reg_1434 <= {{bias[31:2]}};
        tmp_4_reg_1439 <= {{W[31:2]}};
        tmp_5_reg_1444 <= {{feature_in[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        Wout_V_reg_1502 <= Wout_V_fu_728_p2;
        bound4_reg_1514 <= bound4_fu_1316_p2;
        rhs_V_4_cast_reg_1508[15 : 0] <= rhs_V_4_cast_fu_743_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_976_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
        bias6_sum_reg_1760 <= bias6_sum_fu_1092_p2;
        indvar_flatten_next7_reg_1775 <= indvar_flatten_next7_fu_1115_p3;
        j_reg_1770 <= j_fu_1104_p2;
        tmp_19_reg_1765 <= tmp_19_fu_1099_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        bound1_reg_1601 <= bound1_fu_805_p2;
        bound_reg_1596 <= bound_fu_796_p2;
        exitcond_mid_reg_1606 <= exitcond_mid_fu_811_p2;
        rhs_V_12_cast1_reg_1578[15 : 0] <= rhs_V_12_cast1_fu_784_p1[15 : 0];
        rhs_V_13_cast_reg_1585[15 : 0] <= rhs_V_13_cast_fu_787_p1[15 : 0];
        rhs_V_14_cast_reg_1590[15 : 0] <= rhs_V_14_cast_fu_790_p1[15 : 0];
        rhs_V_16_cast_reg_1573[7 : 0] <= rhs_V_16_cast_fu_781_p1[7 : 0];
        rhs_V_1_reg_1550[15 : 0] <= rhs_V_1_fu_769_p1[15 : 0];
        rhs_V_2_reg_1568[15 : 0] <= rhs_V_2_fu_778_p1[15 : 0];
        tmp_10_cast_reg_1530[29 : 0] <= tmp_10_cast_fu_757_p1[29 : 0];
        tmp_12_cast_reg_1535[29 : 0] <= tmp_12_cast_fu_760_p1[29 : 0];
        tmp_20_reg_1557[7 : 0] <= tmp_20_fu_772_p1[7 : 0];
        tmp_22_reg_1563[7 : 0] <= tmp_22_fu_775_p1[7 : 0];
        tmp_2_cast1_reg_1520[29 : 0] <= tmp_2_cast1_fu_751_p1[29 : 0];
        tmp_8_cast_reg_1525[29 : 0] <= tmp_8_cast_fu_754_p1[29 : 0];
        tmp_9_reg_1540[7 : 0] <= tmp_9_fu_763_p1[7 : 0];
        tmp_s_reg_1545[7 : 0] <= tmp_s_fu_766_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state32) & (exitcond_flatten_fu_976_p2 == 1'd0))) begin
        brmerge_reg_1756 <= brmerge_fu_1086_p2;
        h_V_mid2_reg_1735 <= h_V_mid2_fu_1015_p3;
        i_op_assign_19_mid2_reg_1729 <= i_op_assign_19_mid2_fu_992_p3;
        ret_V_15_mid2_v_v_reg_1745 <= ret_V_15_mid2_v_v_fu_1039_p2;
        ret_V_15_mid2_v_v_v_reg_1740 <= ret_V_15_mid2_v_v_v_fu_1027_p3;
        w_V_reg_1750 <= w_V_fu_1067_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        cin_reg_1845 <= cin_fu_1224_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond2_reg_1819 <= exitcond2_fu_1158_p2;
        exitcond2_reg_1819_pp0_iter1_reg <= exitcond2_reg_1819;
        exitcond2_reg_1819_pp0_iter2_reg <= exitcond2_reg_1819_pp0_iter1_reg;
        exitcond2_reg_1819_pp0_iter3_reg <= exitcond2_reg_1819_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        exitcond_flatten1_reg_1616 <= exitcond_flatten1_fu_820_p2;
        indvar_flatten_next1_reg_1620 <= indvar_flatten_next1_fu_825_p2;
        ret_V_1_reg_1611 <= ret_V_1_fu_1322_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (exitcond_flatten1_reg_1616 == 1'd0))) begin
        exitcond_flatten2_reg_1630 <= exitcond_flatten2_fu_839_p2;
        exitcond_mid1_reg_1645 <= exitcond_mid1_fu_857_p3;
        i_op_assign_16_mid_reg_1639 <= i_op_assign_16_mid_fu_844_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
        gmem_addr_1_reg_1881 <= feature_out8_sum_cas_fu_1253_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (exitcond2_reg_1819_pp0_iter1_reg == 1'd0))) begin
        gmem_addr_2_read_reg_1850 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_fu_1158_p2 == 1'd0))) begin
        gmem_addr_2_reg_1823 <= feature_in2_sum9_cas_fu_1177_p1;
        tmp2_reg_1834 <= tmp2_fu_1192_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (exitcond2_reg_1819_pp0_iter1_reg == 1'd0))) begin
        gmem_addr_3_read_reg_1855 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond2_reg_1819 == 1'd0))) begin
        gmem_addr_3_reg_1839 <= W4_sum_cast_fu_1214_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state64))) begin
        gmem_addr_read_reg_1887 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        i_op_assign_16_mid2_reg_1674 <= i_op_assign_16_mid2_fu_885_p3;
        i_op_assign_17_mid2_reg_1658 <= i_op_assign_17_mid2_fu_873_p3;
        tmp_27_reg_1679 <= grp_fu_1342_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        i_op_assign_17_cast7_reg_1716[15 : 0] <= i_op_assign_17_cast7_fu_949_p1[15 : 0];
        ret_V_5_mid2_reg_1711 <= ret_V_5_mid2_fu_943_p3;
        tmp_10_cast_mid2_reg_1705[15 : 0] <= tmp_10_cast_mid2_fu_933_p1[15 : 0];
        tmp_10_mid2_cast_reg_1700[15 : 0] <= tmp_10_mid2_cast_fu_929_p1[15 : 0];
        tmp_10_mid2_v_reg_1695 <= tmp_10_mid2_v_fu_922_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        indvar_flatten_next_reg_1724 <= indvar_flatten_next_fu_981_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        jj_reg_1870 <= jj_fu_1230_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lhs_V_2_cast_reg_1461[15 : 0] <= lhs_V_2_cast_fu_644_p1[15 : 0];
        lhs_V_4_cast_reg_1476[15 : 0] <= lhs_V_4_cast_fu_690_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) & (brmerge_reg_1756 == 1'd0))) begin
        lhs_V_reg_1795 <= lhs_V_fu_1136_p1;
        tmp_34_reg_1800 <= tmp_34_fu_1142_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_fu_1158_p2 == 1'd0))) begin
        next_mul_reg_1829 <= next_mul_fu_1187_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state70))) begin
        p_s_reg_1899 <= p_s_fu_1309_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        ret_V_10_mid2_reg_1790 <= ret_V_10_mid2_fu_1131_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        ret_V_10_mid2_v_v_reg_1780 <= ret_V_10_mid2_v_v_fu_1354_p2;
        ret_V_15_mid2_reg_1785 <= ret_V_15_mid2_fu_1359_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        ret_V_10_reg_1809 <= grp_fu_1370_p3;
        tmp1_reg_1814 <= tmp1_fu_1153_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_mid1_reg_1645 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        ret_V_1_mid1_reg_1664 <= ret_V_1_mid1_fu_1332_p2;
        tmp_21_mid1_reg_1669 <= tmp_21_mid1_fu_1337_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_mid1_reg_1645 == 1'd1) & (1'b1 == ap_CS_fsm_state30))) begin
        ret_V_5_mid1_reg_1690 <= ret_V_5_mid1_fu_911_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        ret_V_5_reg_1625 <= ret_V_5_fu_834_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        sum_reg_1892 <= grp_fu_446_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        tmp_15_reg_1492 <= grp_fu_673_p2;
        tmp_17_reg_1497 <= grp_fu_719_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) & (exitcond_mid1_reg_1645 == 1'd0) & (exitcond_flatten2_reg_1630 == 1'd0))) begin
        tmp_23_reg_1653 <= tmp_23_fu_1327_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        tmp_24_mid2_reg_1684 <= tmp_24_mid2_fu_906_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_34_fu_1142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34) & (brmerge_reg_1756 == 1'd0))) begin
        tmp_reg_1804 <= grp_fu_1364_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (exitcond2_reg_1819_pp0_iter2_reg == 1'd0))) begin
        tp_reg_1860 <= grp_fu_452_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_condition_pp0_exit_iter2_state50 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state50 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_1616 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond2_reg_1819 == 1'd0))) begin
        ap_phi_mux_i_op_assign_phi_fu_400_p4 = cin_reg_1845;
    end else begin
        ap_phi_mux_i_op_assign_phi_fu_400_p4 = i_op_assign_reg_396;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond2_reg_1819 == 1'd0))) begin
        ap_phi_mux_ret_V_14_phi_fu_412_p4 = next_mul_reg_1829;
    end else begin
        ap_phi_mux_ret_V_14_phi_fu_412_p4 = ret_V_14_reg_408;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_1616 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_AWREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_WREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state57)) begin
            gmem_ARADDR = bias6_sum_cast_fu_1235_p1;
        end else if ((1'b1 == ap_condition_820)) begin
            gmem_ARADDR = gmem_addr_3_reg_1839;
        end else if ((1'b1 == ap_condition_802)) begin
            gmem_ARADDR = gmem_addr_2_reg_1823;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state57)) | ((1'b0 == ap_block_pp0_stage2_01001) & (ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_reg_1819 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_01001) & (ap_reg_ioackin_gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond2_reg_1819 == 1'd0)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state70))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state64)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond2_reg_1819_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (exitcond2_reg_1819_pp0_iter1_reg == 1'd0)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state71))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state57) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (exitcond2_reg_1819 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond2_reg_1819 == 1'd0) & (1'b0 == ap_block_pp0_stage1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state64) | ((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond2_reg_1819_pp0_iter1_reg == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3) & (exitcond2_reg_1819_pp0_iter1_reg == 1'd0)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_446_ce = 1'b1;
    end else begin
        grp_fu_446_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_fu_446_p0 = sum_1_reg_384;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_446_p0 = sum_2_reg_419;
    end else begin
        grp_fu_446_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_fu_446_p1 = gmem_addr_read_reg_1887;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_446_p1 = tp_reg_1860;
    end else begin
        grp_fu_446_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_452_ce = 1'b1;
    end else begin
        grp_fu_452_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_673_ap_start = 1'b1;
    end else begin
        grp_fu_673_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_719_ap_start = 1'b1;
    end else begin
        grp_fu_719_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((exitcond_flatten1_reg_1616 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if (((exitcond_flatten_fu_976_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if (((tmp_34_fu_1142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34) & (brmerge_reg_1756 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((~((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state57 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state64))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state70))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end
        end
        ap_ST_fsm_state71 : begin
            if (((ap_sig_ioackin_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state71))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign W4_sum_cast_fu_1214_p1 = W4_sum_fu_1209_p2;

assign W4_sum_fu_1209_p2 = (tmp_39_cast_cast_fu_1205_p1 + tmp_10_cast_reg_1530);

assign Wout_V_fu_728_p2 = (16'd1 + tmp_16_fu_725_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd61];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((1'b1 == ap_block_state37_io) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((1'b1 == ap_block_state37_io) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((1'b1 == ap_block_state38_io) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((1'b1 == ap_block_state38_io) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond2_reg_1819_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond2_reg_1819_pp0_iter1_reg == 1'd0));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond2_reg_1819_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond2_reg_1819_pp0_iter1_reg == 1'd0));
end

assign ap_block_state36_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state37_io = ((ap_sig_ioackin_gmem_ARREADY == 1'b0) & (exitcond2_reg_1819 == 1'd0));
end

assign ap_block_state37_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state38_io = ((ap_sig_ioackin_gmem_ARREADY == 1'b0) & (exitcond2_reg_1819 == 1'd0));
end

assign ap_block_state38_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state44_pp0_stage3_iter1 = ((gmem_RVALID == 1'b0) & (exitcond2_reg_1819_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state45_pp0_stage4_iter1 = ((gmem_RVALID == 1'b0) & (exitcond2_reg_1819_pp0_iter1_reg == 1'd0));
end

assign ap_block_state46_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_802 = ((1'b0 == ap_block_pp0_stage1_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond2_reg_1819 == 1'd0));
end

always @ (*) begin
    ap_condition_820 = ((1'b0 == ap_block_pp0_stage2_01001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_reg_1819 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bias6_sum_cast_fu_1235_p1 = bias6_sum_reg_1760;

assign bias6_sum_fu_1092_p2 = (tmp_8_cast_reg_1525 + tmp_10_mid2_cast_reg_1700);

assign bound1_fu_805_p0 = bound1_fu_805_p00;

assign bound1_fu_805_p00 = CHout_V_read_reg_1405;

assign bound1_fu_805_p1 = bound1_fu_805_p10;

assign bound1_fu_805_p10 = bound4_reg_1514;

assign bound1_fu_805_p2 = (bound1_fu_805_p0 * bound1_fu_805_p1);

assign bound4_fu_1316_p0 = bound4_fu_1316_p00;

assign bound4_fu_1316_p00 = tmp_7_fu_737_p2;

assign bound4_fu_1316_p1 = bound4_fu_1316_p10;

assign bound4_fu_1316_p10 = Wout_V_fu_728_p2;

assign bound_fu_796_p0 = bound_fu_796_p00;

assign bound_fu_796_p00 = Ky_V_read_reg_1392;

assign bound_fu_796_p1 = bound_fu_796_p10;

assign bound_fu_796_p10 = Kx_V_read_reg_1398;

assign bound_fu_796_p2 = (bound_fu_796_p0 * bound_fu_796_p1);

assign brmerge_fu_1086_p2 = (tmp_36_fu_1078_p3 | tmp_32_not_mid2_fu_1055_p3);

assign cin_fu_1224_p2 = (i_op_assign_reg_396 + 16'd1);

assign cout_fu_916_p2 = (i_op_assign_s_reg_315 + 16'd1);

assign exitcond1_fu_987_p2 = ((i_op_assign_4_reg_373 == Kx_V_read_reg_1398) ? 1'b1 : 1'b0);

assign exitcond2_fu_1158_p2 = ((ap_phi_mux_i_op_assign_phi_fu_400_p4 == CHin_V_read_reg_1422) ? 1'b1 : 1'b0);

assign exitcond_flatten1_fu_820_p2 = ((indvar_flatten1_reg_292 == bound1_reg_1601) ? 1'b1 : 1'b0);

assign exitcond_flatten2_fu_839_p2 = ((indvar_flatten6_reg_327 == bound4_reg_1514) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_976_p2 = ((indvar_flatten_reg_351 == bound_reg_1596) ? 1'b1 : 1'b0);

assign exitcond_fu_852_p2 = ((i_op_assign_2_reg_339 == Wout_V_reg_1502) ? 1'b1 : 1'b0);

assign exitcond_mid1_fu_857_p3 = ((exitcond_flatten2_fu_839_p2[0:0] === 1'b1) ? exitcond_mid_reg_1606 : exitcond_fu_852_p2);

assign exitcond_mid_fu_811_p2 = ((Wout_V_reg_1502 == 16'd0) ? 1'b1 : 1'b0);

assign feature_in2_sum9_cas_fu_1177_p1 = $signed(feature_in2_sum9_fu_1172_p2);

assign feature_in2_sum9_fu_1172_p2 = (ret_V_13_fu_1167_p2 + tmp_12_cast_reg_1535);

assign feature_out8_sum_cas_fu_1253_p1 = feature_out8_sum_fu_1248_p2;

assign feature_out8_sum_fu_1248_p2 = (tmp_2_cast1_reg_1520 + tmp_19_cast_cast_fu_1245_p1);

assign grp_fu_1342_p0 = ((tmp_24_fu_869_p2[0:0] === 1'b1) ? 16'd0 : i_op_assign_2_reg_339);

assign grp_fu_1342_p1 = tmp_22_reg_1563;

assign grp_fu_1342_p2 = tmp_s_reg_1545;

assign grp_fu_1348_p0 = rhs_V_14_cast_reg_1590;

assign grp_fu_1348_p1 = i_op_assign_17_cast7_reg_1716;

assign grp_fu_1348_p2 = tmp_10_cast_mid2_reg_1705;

assign grp_fu_1364_p0 = grp_fu_1364_p00;

assign grp_fu_1364_p00 = i_op_assign_19_mid2_reg_1729;

assign grp_fu_1364_p1 = rhs_V_13_cast_reg_1585;

assign grp_fu_1370_p0 = lhs_V_reg_1795;

assign grp_fu_1370_p1 = rhs_V_1_reg_1550;

assign grp_fu_673_p0 = $signed(ret_V_4_fu_660_p2);

assign grp_fu_673_p1 = grp_fu_673_p10;

assign grp_fu_673_p10 = Sx_V_read_reg_1386;

assign grp_fu_719_p0 = $signed(ret_V_8_fu_706_p2);

assign grp_fu_719_p1 = grp_fu_719_p10;

assign grp_fu_719_p10 = Sy_V_read_reg_1380;

assign h_V_fu_956_p2 = (tmp_18_fu_952_p1 + tmp_24_mid2_reg_1684);

assign h_V_mid1_fu_1010_p2 = (tmp_18_mid1_fu_1006_p1 + tmp_24_mid2_reg_1684);

assign h_V_mid2_fu_1015_p3 = ((exitcond1_fu_987_p2[0:0] === 1'b1) ? h_V_mid1_fu_1010_p2 : h_V_fu_956_p2);

assign i_fu_864_p2 = (i_op_assign_16_mid_reg_1639 + 16'd1);

assign i_op_assign_16_mid2_fu_885_p3 = ((exitcond_mid1_reg_1645[0:0] === 1'b1) ? i_fu_864_p2 : i_op_assign_16_mid_reg_1639);

assign i_op_assign_16_mid_fu_844_p3 = ((exitcond_flatten2_fu_839_p2[0:0] === 1'b1) ? 16'd0 : i_op_assign_1_reg_303);

assign i_op_assign_17_cast7_fu_949_p1 = $unsigned(i_op_assign_17_mid2_reg_1658);

assign i_op_assign_17_mid2_fu_873_p3 = ((tmp_24_fu_869_p2[0:0] === 1'b1) ? 16'd0 : i_op_assign_2_reg_339);

assign i_op_assign_19_mid2_fu_992_p3 = ((exitcond1_fu_987_p2[0:0] === 1'b1) ? 8'd0 : i_op_assign_4_reg_373);

assign ii_fu_1000_p2 = (i_op_assign_3_reg_362 + 8'd1);

assign indvar_flatten6_op_fu_1109_p2 = (32'd1 + indvar_flatten6_reg_327);

assign indvar_flatten_next1_fu_825_p2 = (indvar_flatten1_reg_292 + 48'd1);

assign indvar_flatten_next7_fu_1115_p3 = ((exitcond_flatten2_reg_1630[0:0] === 1'b1) ? 32'd1 : indvar_flatten6_op_fu_1109_p2);

assign indvar_flatten_next_fu_981_p2 = (indvar_flatten_reg_351 + 16'd1);

assign j_fu_1104_p2 = ($signed(16'd1) + $signed(i_op_assign_17_mid2_reg_1658));

assign jj_fu_1230_p2 = (i_op_assign_19_mid2_reg_1729 + 8'd1);

assign lhs_V_2_cast_fu_644_p1 = Win_V_read_reg_1411;

assign lhs_V_4_cast_fu_690_p1 = Hin_V_read_reg_1417;

assign lhs_V_5_cast_fu_961_p1 = h_V_fu_956_p2;

assign lhs_V_5_cast_mid1_fu_1023_p1 = h_V_mid1_fu_1010_p2;

assign lhs_V_6_cast_fu_1139_p1 = w_V_reg_1750;

assign lhs_V_fu_1136_p1 = w_V_reg_1750;

assign next_mul_fu_1187_p2 = (rhs_V_14_cast_reg_1590 + ap_phi_mux_ret_V_14_phi_fu_412_p4);

assign notlhs_fu_1280_p2 = ((tmp_30_fu_1266_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_1286_p2 = ((tmp_31_fu_1276_p1 == 23'd0) ? 1'b1 : 1'b0);

assign p_1_fu_617_p3 = ((mode_V[0:0] === 1'b1) ? pad_x_V_fu_551_p3 : 8'd0);

assign p_2_fu_625_p3 = ((mode_V[0:0] === 1'b1) ? pad_y_V_fu_609_p3 : 8'd0);

assign p_neg9_fu_519_p2 = (9'd1 - tmp_2_cast_fu_501_p1);

assign p_neg_fu_577_p2 = (9'd1 - tmp_16_cast_fu_559_p1);

assign p_s_fu_1309_p3 = ((ret_V_fu_1304_p2[0:0] === 1'b1) ? 32'd0 : sum_reg_1892);

assign pad_x_V_fu_551_p3 = ((tmp_8_fu_511_p3[0:0] === 1'b1) ? tmp_6_fu_545_p2 : tmp_10_fu_535_p4);

assign pad_y_V_fu_609_p3 = ((tmp_11_fu_569_p3[0:0] === 1'b1) ? tmp_14_fu_603_p2 : tmp_13_fu_593_p4);

assign ret_V_10_mid2_fu_1131_p0 = rhs_V_2_reg_1568;

assign ret_V_10_mid2_fu_1131_p1 = ret_V_10_mid2_v_v_reg_1780;

assign ret_V_10_mid2_fu_1131_p2 = ($signed({{1'b0}, {ret_V_10_mid2_fu_1131_p0}}) * $signed(ret_V_10_mid2_fu_1131_p1));

assign ret_V_10_mid2_v_v_fu_1354_p0 = rhs_V_1_reg_1550;

assign ret_V_13_fu_1167_p2 = ($signed(rhs_V_11_cast_fu_1163_p1) + $signed(ret_V_10_reg_1809));

assign ret_V_15_mid2_fu_1359_p0 = rhs_V_1_reg_1550;

assign ret_V_15_mid2_fu_1359_p1 = ret_V_15_mid2_fu_1359_p10;

assign ret_V_15_mid2_fu_1359_p10 = ret_V_15_mid2_v_v_reg_1745;

assign ret_V_15_mid2_v_v_fu_1039_p0 = rhs_V_16_cast_reg_1573;

assign ret_V_15_mid2_v_v_fu_1039_p1 = ret_V_15_mid2_v_v_fu_1039_p10;

assign ret_V_15_mid2_v_v_fu_1039_p10 = ret_V_15_mid2_v_v_v_fu_1027_p3;

assign ret_V_15_mid2_v_v_fu_1039_p2 = (ret_V_15_mid2_v_v_fu_1039_p0 * ret_V_15_mid2_v_v_fu_1039_p1);

assign ret_V_15_mid2_v_v_v_fu_1027_p3 = ((exitcond1_fu_987_p2[0:0] === 1'b1) ? ii_fu_1000_p2 : i_op_assign_3_reg_362);

assign ret_V_1_fu_1322_p0 = ret_V_1_fu_1322_p00;

assign ret_V_1_fu_1322_p00 = $unsigned(i_op_assign_1_reg_303);

assign ret_V_1_fu_1322_p1 = rhs_V_4_cast_reg_1508;

assign ret_V_1_mid1_fu_1332_p0 = ret_V_1_mid1_fu_1332_p00;

assign ret_V_1_mid1_fu_1332_p00 = $unsigned(i_fu_864_p2);

assign ret_V_1_mid1_fu_1332_p1 = rhs_V_4_cast_reg_1508;

assign ret_V_1_tr_fu_563_p2 = ($signed(9'd511) + $signed(tmp_16_cast_fu_559_p1));

assign ret_V_2_cast_fu_640_p1 = ret_V_2_fu_633_p3;

assign ret_V_2_fu_633_p3 = {{p_1_reg_1449}, {1'd0}};

assign ret_V_3_cast_fu_653_p1 = ret_V_3_fu_647_p2;

assign ret_V_3_fu_647_p2 = (lhs_V_2_cast_fu_644_p1 + ret_V_2_cast_fu_640_p1);

assign ret_V_4_fu_660_p2 = (ret_V_3_cast_fu_653_p1 - rhs_V_2_cast_fu_657_p1);

assign ret_V_5_fu_834_p0 = ret_V_5_fu_834_p00;

assign ret_V_5_fu_834_p00 = ret_V_1_reg_1611;

assign ret_V_5_fu_834_p1 = rhs_V_12_cast1_reg_1578;

assign ret_V_5_fu_834_p2 = (ret_V_5_fu_834_p0 * ret_V_5_fu_834_p1);

assign ret_V_5_mid1_fu_911_p0 = ret_V_5_mid1_fu_911_p00;

assign ret_V_5_mid1_fu_911_p00 = ret_V_1_mid1_reg_1664;

assign ret_V_5_mid1_fu_911_p1 = rhs_V_12_cast1_reg_1578;

assign ret_V_5_mid1_fu_911_p2 = (ret_V_5_mid1_fu_911_p0 * ret_V_5_mid1_fu_911_p1);

assign ret_V_5_mid2_fu_943_p3 = ((exitcond_mid1_reg_1645[0:0] === 1'b1) ? ret_V_5_mid1_reg_1690 : ret_V_5_mid_fu_937_p3);

assign ret_V_5_mid_fu_937_p3 = ((exitcond_flatten2_reg_1630[0:0] === 1'b1) ? 48'd0 : ret_V_5_reg_1625);

assign ret_V_6_cast_fu_686_p1 = ret_V_6_fu_679_p3;

assign ret_V_6_fu_679_p3 = {{p_2_reg_1455}, {1'd0}};

assign ret_V_7_cast_fu_699_p1 = ret_V_7_fu_693_p2;

assign ret_V_7_fu_693_p2 = (lhs_V_4_cast_fu_690_p1 + ret_V_6_cast_fu_686_p1);

assign ret_V_8_fu_706_p2 = (ret_V_7_cast_fu_699_p1 - rhs_V_5_cast_fu_703_p1);

assign ret_V_fu_1304_p2 = (rhs_V_fu_1298_p2 & relu_en_V_read_reg_1375);

assign ret_V_tr_fu_505_p2 = ($signed(9'd511) + $signed(tmp_2_cast_fu_501_p1));

assign rev1_fu_1049_p2 = (slt1_fu_1044_p2 ^ 1'd1);

assign rev_fu_970_p2 = (slt_fu_965_p2 ^ 1'd1);

assign rhs_V_11_cast_fu_1163_p1 = ap_phi_mux_i_op_assign_phi_fu_400_p4;

assign rhs_V_12_cast1_fu_784_p1 = CHout_V_read_reg_1405;

assign rhs_V_13_cast_fu_787_p1 = CHin_V_read_reg_1422;

assign rhs_V_14_cast_fu_790_p1 = CHout_V_read_reg_1405;

assign rhs_V_16_cast_fu_781_p1 = Kx_V_read_reg_1398;

assign rhs_V_1_fu_769_p1 = CHin_V_read_reg_1422;

assign rhs_V_2_cast_fu_657_p1 = Kx_V_read_reg_1398;

assign rhs_V_2_fu_778_p1 = Win_V_read_reg_1411;

assign rhs_V_4_cast_fu_743_p1 = Wout_V_fu_728_p2;

assign rhs_V_5_cast_fu_703_p1 = Ky_V_read_reg_1392;

assign rhs_V_fu_1298_p2 = (tmp_33_fu_456_p2 & tmp_32_fu_1292_p2);

assign slt1_fu_1044_p2 = (($signed(lhs_V_5_cast_mid1_fu_1023_p1) < $signed(lhs_V_4_cast_reg_1476)) ? 1'b1 : 1'b0);

assign slt_fu_965_p2 = (($signed(lhs_V_5_cast_fu_961_p1) < $signed(lhs_V_4_cast_reg_1476)) ? 1'b1 : 1'b0);

assign sum_4_to_int_fu_1263_p1 = sum_reg_1892;

assign tmp1_fu_1153_p0 = tmp1_fu_1153_p00;

assign tmp1_fu_1153_p00 = tmp_reg_1804;

assign tmp1_fu_1153_p1 = rhs_V_12_cast1_reg_1578;

assign tmp1_fu_1153_p2 = (tmp1_fu_1153_p0 * tmp1_fu_1153_p1);

assign tmp2_cast_fu_1197_p1 = tmp2_reg_1834;

assign tmp2_fu_1192_p2 = (tmp_10_cast_mid2_reg_1705 + ap_phi_mux_ret_V_14_phi_fu_412_p4);

assign tmp3_cast_fu_1096_p1 = grp_fu_1348_p3;

assign tmp_10_cast_fu_757_p1 = tmp_4_reg_1439;

assign tmp_10_cast_mid2_fu_933_p1 = tmp_10_mid2_v_fu_922_p3;

assign tmp_10_fu_535_p4 = {{ret_V_tr_fu_505_p2[8:1]}};

assign tmp_10_mid2_cast_fu_929_p1 = tmp_10_mid2_v_fu_922_p3;

assign tmp_10_mid2_v_fu_922_p3 = ((exitcond_flatten2_reg_1630[0:0] === 1'b1) ? cout_fu_916_p2 : i_op_assign_s_reg_315);

assign tmp_11_fu_569_p3 = ret_V_1_tr_fu_563_p2[32'd8];

assign tmp_12_cast_fu_760_p1 = tmp_5_reg_1444;

assign tmp_12_fu_583_p4 = {{p_neg_fu_577_p2[8:1]}};

assign tmp_13_fu_593_p4 = {{ret_V_1_tr_fu_563_p2[8:1]}};

assign tmp_14_fu_603_p2 = (8'd0 - tmp_12_fu_583_p4);

assign tmp_16_cast_fu_559_p1 = Ky_V;

assign tmp_16_fu_725_p1 = tmp_15_reg_1492[15:0];

assign tmp_18_fu_952_p1 = i_op_assign_3_reg_362;

assign tmp_18_mid1_fu_1006_p1 = ii_fu_1000_p2;

assign tmp_19_cast_cast_fu_1245_p1 = tmp_19_reg_1765;

assign tmp_19_fu_1099_p2 = (ret_V_5_mid2_reg_1711 + tmp3_cast_fu_1096_p1);

assign tmp_20_fu_772_p1 = Sy_V_read_reg_1380;

assign tmp_21_fu_734_p1 = tmp_17_reg_1497[15:0];

assign tmp_21_mid1_fu_1337_p1 = tmp_20_reg_1557;

assign tmp_22_fu_775_p1 = Sx_V_read_reg_1386;

assign tmp_23_fu_1327_p0 = tmp_20_reg_1557;

assign tmp_24_fu_869_p2 = (exitcond_mid1_reg_1645 | exitcond_flatten2_reg_1630);

assign tmp_24_mid226_v_fu_891_p3 = ((exitcond_flatten2_reg_1630[0:0] === 1'b1) ? 16'd0 : tmp_23_reg_1653);

assign tmp_24_mid2_fu_906_p2 = (tmp_24_mid2_v_fu_900_p3 - tmp_9_reg_1540);

assign tmp_24_mid2_v_fu_900_p3 = ((exitcond_mid1_reg_1645[0:0] === 1'b1) ? tmp_21_mid1_reg_1669 : tmp_24_mid226_v_fu_891_p3);

assign tmp_28_fu_1063_p1 = i_op_assign_19_mid2_fu_992_p3;

assign tmp_29_fu_1072_p2 = (w_V_fu_1067_p2 | h_V_mid2_fu_1015_p3);

assign tmp_2_cast1_fu_751_p1 = tmp_1_reg_1429;

assign tmp_2_cast_fu_501_p1 = Kx_V;

assign tmp_30_fu_1266_p4 = {{sum_4_to_int_fu_1263_p1[30:23]}};

assign tmp_31_fu_1276_p1 = sum_4_to_int_fu_1263_p1[22:0];

assign tmp_32_fu_1292_p2 = (notrhs_fu_1286_p2 | notlhs_fu_1280_p2);

assign tmp_32_not_mid2_fu_1055_p3 = ((exitcond1_fu_987_p2[0:0] === 1'b1) ? rev1_fu_1049_p2 : rev_fu_970_p2);

assign tmp_34_fu_1142_p2 = (($signed(lhs_V_6_cast_fu_1139_p1) < $signed(lhs_V_2_cast_reg_1461)) ? 1'b1 : 1'b0);

assign tmp_36_fu_1078_p3 = tmp_29_fu_1072_p2[32'd15];

assign tmp_38_fu_1200_p2 = (tmp1_reg_1814 + tmp2_cast_fu_1197_p1);

assign tmp_39_cast_cast_fu_1205_p1 = tmp_38_fu_1200_p2;

assign tmp_3_fu_525_p4 = {{p_neg9_fu_519_p2[8:1]}};

assign tmp_6_fu_545_p2 = (8'd0 - tmp_3_fu_525_p4);

assign tmp_7_fu_737_p2 = (16'd1 + tmp_21_fu_734_p1);

assign tmp_8_cast_fu_754_p1 = tmp_2_reg_1434;

assign tmp_8_fu_511_p3 = ret_V_tr_fu_505_p2[32'd8];

assign tmp_9_fu_763_p1 = p_2_reg_1455;

assign tmp_s_fu_766_p1 = p_1_reg_1449;

assign w_V_fu_1067_p2 = ($signed(tmp_28_fu_1063_p1) + $signed(tmp_27_reg_1679));

always @ (posedge ap_clk) begin
    lhs_V_2_cast_reg_1461[16] <= 1'b0;
    lhs_V_4_cast_reg_1476[16] <= 1'b0;
    rhs_V_4_cast_reg_1508[31:16] <= 16'b0000000000000000;
    tmp_2_cast1_reg_1520[48:30] <= 19'b0000000000000000000;
    tmp_8_cast_reg_1525[30] <= 1'b0;
    tmp_10_cast_reg_1530[48:30] <= 19'b0000000000000000000;
    tmp_12_cast_reg_1535[47:30] <= 18'b000000000000000000;
    tmp_9_reg_1540[15:8] <= 8'b00000000;
    tmp_s_reg_1545[15:8] <= 8'b00000000;
    rhs_V_1_reg_1550[31:16] <= 16'b0000000000000000;
    tmp_20_reg_1557[15:8] <= 8'b00000000;
    tmp_22_reg_1563[15:8] <= 8'b00000000;
    rhs_V_2_reg_1568[47:16] <= 32'b00000000000000000000000000000000;
    rhs_V_16_cast_reg_1573[15:8] <= 8'b00000000;
    rhs_V_12_cast1_reg_1578[47:16] <= 32'b00000000000000000000000000000000;
    rhs_V_13_cast_reg_1585[23:16] <= 8'b00000000;
    rhs_V_14_cast_reg_1590[31:16] <= 16'b0000000000000000;
    tmp_10_mid2_cast_reg_1700[30:16] <= 15'b000000000000000;
    tmp_10_cast_mid2_reg_1705[31:16] <= 16'b0000000000000000;
    i_op_assign_17_cast7_reg_1716[31:16] <= 16'b0000000000000000;
end

endmodule //Conv
